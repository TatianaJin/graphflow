group 'ca.waterloo.dsg'
version '0.1'

apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'com.google.protobuf'

repositories {
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.6"

    compile 'io.grpc:grpc-netty:1.1.2'
    compile 'io.grpc:grpc-protobuf:1.1.2'
    compile 'io.grpc:grpc-stub:1.1.2'

    compile 'org.apache.logging.log4j:log4j-api:2.7'
    compile 'org.apache.logging.log4j:log4j-core:2.7'

    compile 'org.jline:jline:3.1.3'

    testCompile 'junit:junit:4.12'
}

// ANTLR4 configuration.
generateGrammarSource {
    maxHeapSize = "64m"
    arguments += [
        "-long-messages",                                   // show exception details
        "-visitor",                                         // generate parse tree visitor classes
        "-package", "ca.waterloo.dsg.graphflow.grammar"     // specify package for generated classes
    ]
}

// gRPC and protobuf configuration.
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    }
}
protobuf {
    protoc {
        // The version of protoc must match protobuf-java.
        artifact = "com.google.protobuf:protoc:3.2.0"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.1.2'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$buildDir/generated-src/proto"
}

// Add the source files generated by ANTLR4 and gRPC to the gradle sourcesets.
sourceSets.main.java.srcDirs += "$buildDir/generated-src/antlr/main"
sourceSets.main.java.srcDirs += "$buildDir/generated-src/proto/main/grpc"
sourceSets.main.java.srcDirs += "$buildDir/generated-src/proto/main/java"

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    // Enable additional compile time warnings.
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Xlint:-cast" << "-Xlint:-serial"
    // Enable incremental builds. Disable if giving errors.
    options.incremental = true
}

apply plugin: 'application'
// Disable the default assembly tasks.
startScripts.enabled = false
run.enabled = false
distZip.enabled = false
distTar.enabled = false
// Create the convenience executables.
def scripts = [
    'graphflow-server'  : 'ca.waterloo.dsg.graphflow.server.GraphflowServerRunner',
    'graphflow-cli'     : 'ca.waterloo.dsg.graphflow.cli.GraphflowCliRunner'
]
scripts.each() { fileName, className ->
    tasks.create(name: fileName, type: CreateStartScripts) {
        mainClassName = className
        applicationName = fileName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
    applicationDistribution.into("bin") {
        from(tasks[fileName])
        fileMode = 0755
    }
}

// Define specific gradle version.
task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

test {
    // Ensures that gradle runs every test class in a different process.
    forkEvery = 1
    maxParallelForks = 8
}